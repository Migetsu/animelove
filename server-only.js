import { exec } from 'child_process';
import http from 'http';

console.log("======================================================");
console.log("  –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò SHIKIMORI  ");
console.log("======================================================");

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 3000
const checkPort = (port) => {
  return new Promise((resolve) => {
    const server = http.createServer();
    server.once('error', () => resolve(false));
    server.once('listening', () => {
      server.close();
      resolve(true);
    });
    server.listen(port);
  });
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
  const isPortFree = await checkPort(3000);
  
  if (!isPortFree) {
    console.log("‚ö†Ô∏è –ü–æ—Ä—Ç 3000 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...");
    try {
      await import('./src/backend/port-killer.js');
    } catch (err) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç:", err);
      process.exit(1);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
    await import('./src/backend/server.js');
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    process.exit(1);
  }
}

startServer();
